// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(DEMO)
  occupation     String?
  gender         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  clinic         Clinic[]
}

model Clinic {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  doctors   Doctor[]
  patients  Patient[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
}

model Doctor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  clinicId  String   @db.ObjectId
}

model Patient {
  id                             String                                @id @default(auto()) @map("_id") @db.ObjectId
  full_civil_name                String
  full_social_name               String?
  cpf                            String?
  cnpj                           String?
  rg                             String?
  rg_issuing_office              String?
  date_of_birth                  DateTime
  gender                         String?
  nationality                    String?
  financial_officer              PatientFinancialOfficer?
  address                        PatientAddress?
  identification_number          String?
  control_number                 String?
  email                          String?
  cell_phone                     String?
  home_phone                     String?
  extension                      String?
  additional_information         PatientAdditionalInformation[]
  additional_contact_information PatientAdditionalContactInformation[]
  marketing_information          PatientMarketingInformation[]
  medical_record                 PatientMedicalRecord[]
  is_active                      Boolean?                              @default(true)
  is_foreign                     Boolean?                              @default(false)
  createdAt                      DateTime                              @default(now())
  updatedAt                      DateTime?                             @updatedAt
  clinic                         Clinic                                @relation(fields: [clinicId], references: [id])
  clinicId                       String                                @db.ObjectId
}

model PatientAddress {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  street       String?
  number       String?
  neighborhood String?
  city         String?
  state        String?
  zip          String?
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  patient      Patient  @relation(fields: [patientId], references: [id])
  patientId    String   @unique @db.ObjectId
}

model PatientMedicalRecord {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  weight    Float?
  height    Float?
  bloodType String?
  allergies String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String   @unique @db.ObjectId
}

model PatientMarketingInformation {
  id         String                                @id @default(auto()) @map("_id") @db.ObjectId
  hobby      String?
  schooling  String?
  indication String?
  birthday   PatientMarketingBirthdayInformation[]
  Patient    Patient?                              @relation(fields: [patientId], references: [id])
  patientId  String?                               @db.ObjectId
}

model PatientMarketingBirthdayInformation {
  id                            String                       @id @default(auto()) @map("_id") @db.ObjectId
  email_birthday_card           Boolean?                     @default(true)
  PatientMarketingInformation   PatientMarketingInformation? @relation(fields: [patientMarketingInformationId], references: [id])
  patientMarketingInformationId String?                      @db.ObjectId
}

model PatientAdditionalInformation {
  id              String                               @id @default(auto()) @map("_id") @db.ObjectId
  cns_sus         String?
  blood_factor    String?
  family          PatientAdditionalFamilyInformation[]
  referral_source String?
  Patient         Patient?                             @relation(fields: [patientId], references: [id])
  patientId       String?                              @db.ObjectId
}

model PatientAdditionalFamilyInformation {
  id                             String                        @id @default(auto()) @map("_id") @db.ObjectId
  ethnicity                      String?
  civil_status                   String?
  partner_name                   String?
  mother_name                    String?
  father_name                    String?
  responsible_name               String?
  PatientAdditionalInformation   PatientAdditionalInformation? @relation(fields: [patientAdditionalInformationId], references: [id])
  patientAdditionalInformationId String?                       @db.ObjectId
}

model PatientAdditionalContactInformation {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  business_phone String?
  messages_phone String?
  extension_one  String?
  extension_two  String?
  skype          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  patient        Patient   @relation(fields: [patientId], references: [id])
  patientId      String    @unique @db.ObjectId
}

model PatientFinancialOfficer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String   @unique @db.ObjectId
}

enum Role {
  MANAGER
  CLINIC
  DOCTOR
  DEMO
}
